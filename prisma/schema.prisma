generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Geographical Models
model GeoRegion {
  id         String      @id @default(cuid())
  name       String      @unique
  type       String
  provinces  Province[]
  regions    Region[]
  mkaRegions MkaRegion[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  order      Int         @default(0)
  level      Int         @default(0)
}

model Province {
  id          String     @id @default(cuid())
  name        String
  code        String?
  geoRegion   GeoRegion  @relation(fields: [geoRegionId], references: [id])
  geoRegionId String
  districts   District[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  order       Int        @default(0)
  path        String     @unique
  level       Int        @default(1)

  @@unique([name, geoRegionId])
  @@index([path])
}

model District {
  id         String   @id @default(cuid())
  name       String
  code       String?
  province   Province @relation(fields: [provinceId], references: [id])
  provinceId String
  llgs       LLG[]
  tenant     Tenant?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Int      @default(0)
  path       String   @unique
  level      Int      @default(2)

  @@unique([name, provinceId])
  @@index([path])
}

model LLG {
  id         String   @id @default(cuid())
  name       String
  code       String?
  district   District @relation(fields: [districtId], references: [id])
  districtId String
  wards      Ward[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      Int      @default(0)
  path       String   @unique
  level      Int      @default(3)

  @@unique([name, districtId])
  @@index([path])
}

model Ward {
  id          String           @id @default(cuid())
  name        String
  code        String?
  llg         LLG              @relation(fields: [llgId], references: [id])
  llgId       String
  villages    String[]
  locations   Location[]
  dataBuckets WardDataBucket[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  order       Int              @default(0)
  path        String           @unique
  level       Int              @default(4)

  @@unique([name, llgId])
  @@index([path])
}

model Region {
  id          String        @id @default(cuid())
  name        String
  code        String?
  geoRegion   GeoRegion     @relation(fields: [geoRegionId], references: [id])
  geoRegionId String
  districts   AbgDistrict[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  order       Int           @default(0)
  path        String        @unique
  level       Int           @default(1)

  @@unique([name, geoRegionId])
  @@index([path])
}

model AbgDistrict {
  id             String         @id @default(cuid())
  name           String
  code           String?
  region         Region         @relation(fields: [regionId], references: [id])
  regionId       String
  constituencies Constituency[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  order          Int            @default(0)
  path           String         @unique
  level          Int            @default(2)

  @@unique([name, regionId])
  @@index([path])
}

model Constituency {
  id         String      @id @default(cuid())
  name       String
  code       String?
  district   AbgDistrict @relation(fields: [districtId], references: [id])
  districtId String
  villages   String[]
  locations  Location[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  order      Int         @default(0)
  path       String      @unique
  level      Int         @default(3)

  @@unique([name, districtId])
  @@index([path])
}

model MkaRegion {
  id          String    @id @default(cuid())
  name        String
  code        String?
  geoRegion   GeoRegion @relation(fields: [geoRegionId], references: [id])
  geoRegionId String
  wards       MkaWard[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  order       Int       @default(0)
  path        String    @unique
  level       Int       @default(1)

  @@unique([name, geoRegionId])
  @@index([path])
}

model MkaWard {
  id        String     @id @default(cuid())
  name      String
  code      String?
  region    MkaRegion  @relation(fields: [regionId], references: [id])
  regionId  String
  sections  String[]
  locations Location[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  order     Int        @default(0)
  path      String     @unique
  level     Int        @default(2)

  @@unique([name, regionId])
  @@index([path])
}

model Location {
  id             String        @id @default(cuid())
  name           String
  code           String?
  ward           Ward?         @relation(fields: [wardId], references: [id])
  wardId         String?
  constituency   Constituency? @relation(fields: [constituencyId], references: [id])
  constituencyId String?
  mkaWard        MkaWard?      @relation(fields: [mkaWardId], references: [id])
  mkaWardId      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  order          Int           @default(0)
  path           String        @unique
  level          Int

  @@index([path])
}

model NodeMovementHistory {
  id          String   @id @default(cuid())
  nodeId      String
  nodeType    String
  oldParentId String
  newParentId String
  movedAt     DateTime @default(now())
  movedBy     User     @relation(fields: [userId], references: [id])
  userId      String
  oldPath     String
  newPath     String
  createdAt   DateTime @default(now())
}

// Multi-tenancy Models
model Tenant {
  id          String       @id @default(cuid())
  district    District     @relation(fields: [districtId], references: [id])
  districtId  String       @unique
  isActive    Boolean      @default(true)
  users       User[]
  dataPeriods DataPeriod[]
  files       File[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model User {
  id                    String                @id @default(cuid())
  name                  String?
  email                 String                @unique
  emailVerified         DateTime?
  password              String
  role                  UserRole              @default(USER)
  tenant                Tenant?               @relation(fields: [tenantId], references: [id])
  tenantId              String?
  isActive              Boolean               @default(true)
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  verificationToken     String?               @unique
  resetToken            String?               @unique
  resetTokenExpiry      DateTime?
  nodeMovementHistories NodeMovementHistory[]
}

// Data Collection Models
model DataPeriod {
  id            String           @id @default(cuid())
  year          Int
  tenant        Tenant           @relation(fields: [tenantId], references: [id])
  tenantId      String
  status        Status           @default(PENDING)
  dataBuckets   WardDataBucket[]
  isCompleted   Boolean          @default(false)
  dateCompleted DateTime?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@unique([year, tenantId])
}

model WardDataBucket {
  id            String     @id @default(cuid())
  ward          Ward       @relation(fields: [wardId], references: [id])
  wardId        String
  dataPeriod    DataPeriod @relation(fields: [dataPeriodId], references: [id])
  dataPeriodId  String
  bucketType    BucketType
  data          Json?
  isCompleted   Boolean    @default(false)
  dateCompleted DateTime?
  files         File[]
  lastModified  DateTime   @updatedAt
  modifiedBy    String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([wardId, dataPeriodId, bucketType])
}

model DataEntryStatus {
  id             String    @id @default(cuid())
  dataYearId     String
  type           String // "WARD" or "VILLAGE"
  referenceKeyId String // Ward ID or Village ID
  dateCompleted  DateTime?
  isCompleted    Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model File {
  id           String         @id @default(cuid())
  tenant       Tenant         @relation(fields: [tenantId], references: [id])
  tenantId     String
  dataBucket   WardDataBucket @relation(fields: [dataBucketId], references: [id])
  dataBucketId String
  filename     String
  path         String
  type         String
  description  String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model DisasterAlert {
  id                         String    @id @default(cuid())
  tenantId                   String
  alertDate                  DateTime
  alertBy                    String
  level1Id                   String
  level2Id                   String?
  level3Id                   String?
  level4Id                   String?
  level5Id                   String?
  level6Id                   String?
  location                   String
  message                    String
  isFakeNews                 Boolean   @default(false)
  alertVerifiedDate          DateTime?
  alertVerifiedBy            String?
  alertApprovedForPublicDate DateTime?
  alertApprovedForPublicBy   String?
  severity                   Int
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
}

enum UserRole {
  ROOT
  ADMIN
  USER
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum BucketType {
  T1 // Population
  T2 // Agriculture-Cash Crop
  T3 // Agriculture-Garden Food
  T4 // Agriculture-Fishing
  T5 // Agriculture-Livestock
  T6 // Business
  T7 // Community Resources
  T8 // Drinking Water & Sanitation
  T9 // Transportation
  T10 // Transportation Roads
  T11 // Law & Order
  T12 // Disaster
  T13 // Village Assembly Resource People
  T14 // Village Assembly Other Information
  T15 // Education
  T16 // Education Secondary/High Schools
  T17 // Education Other Institutions
  T18 // Health Center
  T19 // Health Mobile Health Clinic
  T20 // Health Family Life Well Being
}
